package application;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class Program {

	public static void main(String[] args) {
		
		//Instanciando data e hora do momento atual.
		LocalDate date01 = LocalDate.now(); //pega só a data do momento atual.
		LocalDateTime date02 = LocalDateTime.now(); //pega a data e horário LOCAL do momento atual.
		Instant date03 = Instant.now(); //pega a data e horário GLOBAL. Neste caso, horário de Londres.
		
		//Gerando data e hora a partir de um texto ISO 8601.
		LocalDate date04 = LocalDate.parse("2024-08-11"); //gera uma data a partir de um texto no formato ISO 8601.
		LocalDateTime date05 = LocalDateTime.parse("2024-08-11T01:30:55"); //gera uma data e horário a partir de um texto no formato ISO 8601.
		Instant date06 = Instant.parse("2024-06-30T01:29:30Z"); //gera uma data e horário global a partir de um texto no fomrato ISO 8601.
		Instant date07 = Instant.parse("2024-06-30T01:29:30-03:00"); 
		
		// site base: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
		//Gerando data e hora a partir de um formato customizado.
		DateTimeFormatter fmt01 = DateTimeFormatter.ofPattern("dd/MM/yyyy"); //aqui, estou definindo o formato que a data customizada terá.
		DateTimeFormatter fmt02 = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
		
		LocalDate date08 = LocalDate.parse("25/09/2022", fmt01); //1° Parâmetro: texto customizado || 2° Parâmetro: Fomrato que o texto iria ter.
		LocalDateTime date09 = LocalDateTime.parse("25/09/2022 10:00", fmt02); //1° Parâmetro: texto customizado || 2° Parâmetro: Fomrato que o texto iria ter.
		
		
		//Gerando data e hora a partir de dados isolados.
		LocalDate date10 = LocalDate.of(2002, 9, 25);
		LocalDateTime date11 = LocalDateTime.of(2002, 9, 25, 10, 35);
		
		System.out.println("Date01 = " + date01);
		System.out.println("Date02 = " + date02);
		System.out.println("Date03 = " + date03);
		System.out.println("Date04 = " + date04);
		System.out.println("Date05 = " + date05);
		System.out.println("Date06 = " + date06);
		System.out.println("Date07 = " + date07);
		System.out.println("Date08 = " + date08);
		System.out.println("Date09 = " + date09);
		System.out.println("Date10 = " + date10);
		System.out.println("Date11 = " + date11);
		
		//Convertendo data-hora para texto.
		LocalDate date12 = LocalDate.parse("2022-09-25");
		DateTimeFormatter fmt03 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		
		LocalDateTime date13 = LocalDateTime.parse("2002-09-25T10:15");
		DateTimeFormatter fmt04 = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
		
		Instant date14 = Instant.parse("2022-09-25T09:47:26Z");
		DateTimeFormatter fmt05 = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm").withZone(ZoneId.systemDefault()); //ZoneId.systemDefault() - pega a data e hora do usuário, automaticamente.
		
		System.out.println("Date12 = " + date12.format(fmt03)); //1° Forma de escrita para formatar somente a data para local um texto.
		System.out.println("Date12 = " + fmt03.format(date12)); //2° Forma de escrita para formatar somente a data para local um texto.
		
		System.out.println("Date13 = " + date13.format(fmt04)); //1° Forma de escrita para formatar somente data e hora local para um texto.
		System.out.println("Date13 = " + fmt04.format(date13)); //2° Forma de escrita para formatar somente data e hora local para um texto.
		
		System.out.println("Date14 = " + fmt05.format(date14));
		
		
	}

}
